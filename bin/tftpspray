#!/usr/bin/env python3
import logging
import argparse
import ipaddress
import socket
import struct
import random
import selectors
import functools


logger = logging.getLogger(__name__)

_PORTS_DEFAULT = 256
_TIMEOUT_DEFAULT = 30
_MIN_PORT = 1025
_MAX_PORT = 65535
_TFTP_PORT = 69
_TFTP_PREFIX = "v1_tftp_udp_"
_TFTP_MODE = "octet"
_TFTP_MODE_LEN = len(_TFTP_MODE)


def create_tftp_socket(port=0):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.setblocking(False)
    s.bind(("", port))
    return s


def create_tftp_request(port):
    filename = f"{_TFTP_PREFIX}{port}"
    filename_len = len(filename)

    return struct.pack(
        f">H{filename_len}sb{_TFTP_MODE_LEN}sb",
        1,
        filename.encode("ascii"),
        0,
        _TFTP_MODE.encode("ascii"),
        0,
    )


def listening_socket_read(selector, sock, mask):
    data, addr = sock.recvfrom(1500)
    if data:
        if data in (b"PING", b"PONG"):
            print(".", end="", flush=True)
            if data == b"PING":
                sock.sendto(b"PONG", addr)
            return addr, sock.getsockname()
        else:
            print(f"recv: {data}")
    else:
        selector.unregister(sock)
        sock.close()
    return None, None


def listening(args):
    port_numbers = list(range(_MIN_PORT, _MAX_PORT + 1))
    random.shuffle(port_numbers)
    listening_sockets = []
    selector = selectors.DefaultSelector()

    for n in range(args.ports):
        listening_sockets.append(create_tftp_socket(port_numbers.pop()))

    for listening_socket in listening_sockets:
        selector.register(
            listening_socket,
            selectors.EVENT_READ,
            functools.partial(listening_socket_read, selector),
        )

    sent_pkts = 0
    for listening_socket in listening_sockets:
        _, localport = listening_socket.getsockname()
        pkt = create_tftp_request(localport)
        listening_socket.sendto(pkt, (args.listen, _TFTP_PORT))
        sent_pkts += 1

    print("Done sending TFTP GET requests.")
    received_pkts = 0
    looping = True
    addr = None
    localaddr = None
    while looping:
        events = selector.select(timeout=args.timeout)
        if not events:
            break
        for key, mask in events:
            received_pkts += 1
            callback = key.data
            addr, localaddr = callback(key.fileobj, mask)
            if not args.continued and addr is not None:
                looping = False
                break
    if addr:
        print(f"\nPING/PONG received from: {addr} on {localaddr}")
    print(f"Total packets received: {received_pkts}", flush=True)
    print(f"Total packets sent: {sent_pkts}", flush=True)


def sending(args):
    port_numbers = list(range(_MIN_PORT, _MAX_PORT + 1))
    random.shuffle(port_numbers)
    s = create_tftp_socket()
    selector = selectors.DefaultSelector()
    selector.register(
        s, selectors.EVENT_READ, functools.partial(listening_socket_read, selector)
    )

    sent_pkts = 0
    received_pkts = 0
    looping = True
    addr = None
    localaddr = None
    after_sending = False
    while looping:
        if port_numbers:
            events = selector.select(timeout=0.0)
            s.sendto(b"PING", (args.send, port_numbers.pop()))
            sent_pkts += 1
        else:
            events = selector.select(args.timeout)
        if after_sending and not events:
            break
        if not port_numbers:
            after_sending = True
        for key, mask in events:
            received_pkts += 1
            callback = key.data
            addr, localaddr = callback(key.fileobj, mask)
            if not args.continued and addr is not None:
                looping = False
                break
    if addr:
        print(f"\nPING/PONG received from: {addr} on {localaddr}")
    print(f"Total packets received: {received_pkts}", flush=True)
    print(f"Total packets sent: {sent_pkts}", flush=True)


def valid_ipv4(ip):
    try:
        return str(ipaddress.IPv4Address(ip))
    except ipaddress.AddressValueError:
        raise argparse.ArgumentTypeError(f"Invalid IPv4 address: {ip}")


def valid_ports(arg):
    try:
        n = int(arg)
        if n < 1 or n > (_MAX_PORT - _MIN_PORT):
            raise argparse.ArgumentTypeError(
                f"Invalid number of ports: {n} out of range (1, {_MAX_PORT - _MIN_PORT})"
            )
        return n
    except ValueError:
        raise argparse.ArgumentTypeError(f"Invalid number of ports: {n}")


def main():
    parser = argparse.ArgumentParser(
        description="Birthday paradox guessing with TFTP assisted UDP NAT hole punching"
    )
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "-l", "--listen", metavar="FROM_IP", type=valid_ipv4, help="Listening mode"
    )
    group.add_argument(
        "-s", "--send", metavar="TO_IP", type=valid_ipv4, help="Sending mode"
    )
    parser.add_argument(
        "-N",
        "--ports",
        type=valid_ports,
        default=_PORTS_DEFAULT,
        help=f"Number of ports (default: {_PORTS_DEFAULT})",
    )
    parser.add_argument(
        "-C",
        "--continue",
        dest="continued",
        action="store_true",
        help="Continue after receiving first packet",
    )
    parser.add_argument(
        "-t",
        "--timeout",
        type=int,
        default=_TIMEOUT_DEFAULT,
        help=f"Timeout (default: {_TIMEOUT_DEFAULT})",
    )

    args = parser.parse_args()

    try:
        if args.listen:
            return listening(args)
        if args.send:
            return sending(args)
    except KeyboardInterrupt:
        pass


if __name__ == "__main__":
    main()
